name: Sonar Scan

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true

jobs: 
  scanner:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sonar scanner
        run: |
          docker run --rm \
          -v "$(pwd):/usr/src" \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${{ inputs.repo-name }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonar.alves-dev.com \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Gerar resumo do SonarQube
        id: sonar-summary
        run: |
          PROJECT_KEY="${{ inputs.repo-name }}"
          DASHBOARD_URL="https://sonar.alves-dev.com/dashboard?id=${PROJECT_KEY}"
          BASE_URL="https://sonar.alves-dev.com/api/project_badges/measure?project=${PROJECT_KEY}&token=sqb_71f27eb5c7b69605f359cf5d7860011206ec080f&metric"

          cat <<EOF > sonar_result.md
          ### üìä Resultado da An√°lise SonarQube

          [![Quality Gate](${BASE_URL}=alert_status)](${DASHBOARD_URL})

          | Seguran√ßa | Manutenibilidade | Confiabilidade | Cobertura |
          |-----------|------------------|----------------|-----------|
          | [![Vulnerabilities](${BASE_URL}=vulnerabilities)](${DASHBOARD_URL}) | [![Code Smells](${BASE_URL}=code_smells)](${DASHBOARD_URL}) | [![Bugs](${BASE_URL}=bugs)](${DASHBOARD_URL}) | [![Coverage](${BASE_URL}=coverage)](${DASHBOARD_URL}) |
          | [![Security Rating](${BASE_URL}=security_rating)](${DASHBOARD_URL}) | [![Maintainability Rating](${BASE_URL}=sqale_rating)](${DASHBOARD_URL}) | [![Reliability Rating](${BASE_URL}=reliability_rating)](${DASHBOARD_URL}) |  |
          | [![Security Hotspots](${BASE_URL}=security_hotspots)](${DASHBOARD_URL}) | [![Technical Debt](${BASE_URL}=sqale_index)](${DASHBOARD_URL}) |  |  |
          EOF

          echo "markdown<<EOF" >> $GITHUB_OUTPUT
          cat sonar_result.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get PR Info
        uses: actions/github-script@v7
        id: pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: `${context.repo.owner}:develop`,
              base: "main"
            });

            if (prs.data.length === 0) {
              core.setFailed("‚ùå Nenhum PR encontrado de develop para main.");
            } else {
              const pr = prs.data[0];
              console.log(`PR encontrado: #${pr.number}`);
              core.setOutput('pr_number', pr.number);
            }

      - name: Comentar no PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = Number('${{ steps.pr.outputs.pr_number }}');
            const body = `${{ steps.sonar-summary.outputs.markdown }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
